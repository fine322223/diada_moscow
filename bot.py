#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Diada Moscow Bot - Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–º
"""

import asyncio
import json
import logging
import os
import time
from pathlib import Path

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# ============= –ù–ê–°–¢–†–û–ô–ö–ò =============
# !!! –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
API_TOKEN = "7705846893:AAFkZQYuAcaxXwi40511X8BAy3f-XOw5_Ts"  # –ü–æ–ª—É—á–∏—Ç—å —É @BotFather
GROUP_ID = -4923899055  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ (—É–∑–Ω–∞—Ç—å —É @userinfobot)
ADMIN_IDS = [5186803258, 467876266]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—É–∑–Ω–∞—Ç—å —É @userinfobot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
storage = MemoryStorage()
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
PRODUCTS_FILE = Path(__file__).parent / "products.json"
PROJECT_DIR = Path(__file__).parent.absolute()
IMAGES_DIR = PROJECT_DIR / "images" / "products"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
IMAGES_DIR.mkdir(parents=True, exist_ok=True)

# ============= –†–ê–ë–û–¢–ê –° –§–ê–ô–õ–ê–ú–ò =============

def load_products_from_file():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if PRODUCTS_FILE.exists():
            with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []


def save_products_to_file(products):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É—à –Ω–∞ GitHub
        try:
            import subprocess
            
            project_path = str(PROJECT_DIR)
            
            # –î–æ–±–∞–≤–ª—è–µ–º products.json –∏ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result = subprocess.run(['git', 'add', 'products.json', 'images/'], 
                          cwd=project_path, 
                          capture_output=True, text=True)
            
            result = subprocess.run(['git', 'commit', '-m', '–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'], 
                          cwd=project_path,
                          capture_output=True, text=True)
            
            result = subprocess.run(['git', 'push'], 
                          cwd=project_path,
                          capture_output=True, text=True)
            
            if result.returncode == 0:
                logging.info("‚úÖ –¢–æ–≤–∞—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ GitHub! –ü–æ—è–≤—è—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.")
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ git push: {result.stderr}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ GitHub: {e}")
        
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return False


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
products = load_products_from_file()

# ============= –°–û–°–¢–û–Ø–ù–ò–Ø FSM =============

class AddProduct(StatesGroup):
    product_id = State()
    name = State()
    price = State()
    description = State()
    image = State()


class EditProduct(StatesGroup):
    select_product = State()
    edit_field = State()
    new_value = State()


# ============= –ö–õ–ê–í–ò–ê–¢–£–†–´ =============

def user_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(
                text="üëú –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://fine322223.github.io/diada_moscow/")
            )],
            [KeyboardButton(text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard


def admin_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")],
        [InlineKeyboardButton(
            text="üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/fine911"
        )]
    ])
    return keyboard


def admin_keyboard():
    """–û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å WebApp"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(
                text="üëú –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
                web_app=WebAppInfo(url="https://fine322223.github.io/diada_moscow/")
            )],
            [KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )
    return keyboard


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =============

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    
    if user_id in ADMIN_IDS:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º Diada Moscow.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.",
            reply_markup=admin_keyboard()
        )
    else:
        await message.answer(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Diada Moscow - –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=user_menu()
        )


@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def show_admin_menu(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        return
    
    await message.answer(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_menu()
    )


@dp.message(F.text == "üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def show_support(message: types.Message):
    support_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            url="https://t.me/fine911"
        )]
    ])
    
    await message.answer(
        "üìû <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n"
        "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        parse_mode="HTML",
        reply_markup=support_keyboard
    )


# ============= –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í =============

@dp.message(F.content_type == types.ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    import time
    import base64
    import urllib.parse
    
    start_time = time.time()
    logging.info(f"üîî –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        raw_data = message.web_app_data.data
        
        # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 (–¥–ª—è iOS)
        try:
            decoded = base64.b64decode(raw_data).decode('utf-8')
            decoded = urllib.parse.unquote(decoded)
            data = json.loads(decoded)
            logging.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (base64): {data}")
        except:
            # –ï—Å–ª–∏ –Ω–µ base64, —Ç–æ –æ–±—ã—á–Ω—ã–π JSON
            data = json.loads(raw_data)
            logging.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (JSON): {data}")
        
        parse_time = time.time()
        logging.info(f"‚è± –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª: {(parse_time - start_time)*1000:.0f}ms")
        
        name = data.get("name")
        phone = data.get("phone")
        address = data.get("address")
        telegram = f"@{message.from_user.username}" if message.from_user.username else data.get("telegram", "–ù–µ —É–∫–∞–∑–∞–Ω")
        cart = data.get("cart", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        order_text = (
            f"üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"üí¨ <b>Telegram:</b> {telegram}\n\n"
            f"üõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        )
        
        total = 0
        for item in cart:
            order_text += f"‚Ä¢ {item['title']} - {item['price']} ‚ÇΩ\n"
            total += item['price']
        
        order_text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ:</b> {total} ‚ÇΩ"
        format_time = time.time()
        logging.info(f"‚è± –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {(format_time - parse_time)*1000:.0f}ms")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        user_id = message.from_user.id
        if user_id in ADMIN_IDS:
            await message.answer(
                "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!",
                reply_markup=admin_menu()
            )
        else:
            await message.answer(
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=user_menu()
            )
        answer_time = time.time()
        logging.info(f"‚è± –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {(answer_time - format_time)*1000:.0f}ms")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –ø—Ä–æ–¥–∞–≤—Ü–∞
        try:
            await bot.send_message(GROUP_ID, order_text, parse_mode="HTML")
            group_time = time.time()
            logging.info(f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∑–∞ {(group_time - answer_time)*1000:.0f}ms")
            logging.info(f"‚è± –û–ë–©–ï–ï –í–†–ï–ú–Ø: {(group_time - start_time)*1000:.0f}ms")
        except Exception as group_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {group_error}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")
        user_id = message.from_user.id
        menu = admin_menu() if user_id in ADMIN_IDS else user_menu()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=menu
        )


# ============= –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò =============

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "add_product")
async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    existing_ids = [p['id'] for p in products]
    id_list = ", ".join(existing_ids) if existing_ids else "–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤"
    
    await callback.message.answer(
        f"üìù –í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n\n"
        f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ID: {id_list}\n\n"
        f"üí° ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3 –∏–ª–∏ custom_id)"
    )
    await state.set_state(AddProduct.product_id)
    await callback.answer()


@dp.message(AddProduct.product_id)
async def add_product_id(message: types.Message, state: FSMContext):
    product_id = message.text.strip()
    
    if any(p['id'] == product_id for p in products):
        await message.answer(f"‚ùå ID '{product_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π ID:")
        return
    
    await state.update_data(product_id=product_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.name)


@dp.message(AddProduct.name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProduct.price)


@dp.message(AddProduct.price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer(
            "üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (1-2 —Å—Ç—Ä–æ–∫–∏)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑–º–µ—Ä –ú, –Ω–æ–≤–æ–µ\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        )
        await state.set_state(AddProduct.description)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@dp.message(AddProduct.description)
async def add_product_description(message: types.Message, state: FSMContext):
    description = message.text if message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else ''
    await state.update_data(description=description)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ"
    )
    await state.set_state(AddProduct.image)


@dp.message(AddProduct.image)
async def add_product_image(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    
    image_url = ''
    
    if message.photo:
        try:
            photo = message.photo[-1]
            timestamp = int(time.time())
            file_name = f"product_{product_id}_{timestamp}.jpg"
            file_path = IMAGES_DIR / file_name
            
            await bot.download(photo, destination=file_path)
            image_url = f"https://fine322223.github.io/diada_moscow/images/products/{file_name}"
            
            logging.info(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            return
    
    elif message.text and message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        image_url = message.text
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    new_product = {
        'id': product_id,
        'name': data['name'],
        'price': data['price'],
        'description': data.get('description', ''),
        'image': image_url
    }
    
    products.append(new_product)
    
    if save_products_to_file(products):
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {new_product['name']}\n"
            f"–¶–µ–Ω–∞: {new_product['price']} ‚ÇΩ\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {new_product['description'] if new_product['description'] else '‚ùå –ù–µ—Ç'}\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'üì∏ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if message.photo else ('üîó URL' if image_url else '‚ùå –ù–µ—Ç')}\n\n"
            f"–¢–æ–≤–∞—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã!",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞",
            reply_markup=admin_menu()
        )
    
    await state.clear()


# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(F.data == "list_products")
async def list_products(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"
    for p in products:
        text += f"ID: {p['id']}\n"
        text += f"‚Ä¢ {p['name']} - {p['price']} ‚ÇΩ\n\n"
    
    await callback.message.answer(text, parse_mode="HTML", reply_markup=admin_menu())
    await callback.answer()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "edit_product")
async def edit_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ ID):\n\n"
    for p in products:
        text += f"ID: {p['id']} - {p['name']}\n"
    
    await callback.message.answer(text)
    await state.set_state(EditProduct.select_product)
    await callback.answer()


@dp.message(EditProduct.select_product)
async def edit_product_select(message: types.Message, state: FSMContext):
    product_id = message.text
    product = next((p for p in products if p['id'] == product_id), None)
    
    if not product:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(product_id=product_id)
    await message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product['name']}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n"
        f"1 - –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        f"2 - –¶–µ–Ω–∞\n"
        f"3 - –û–ø–∏—Å–∞–Ω–∏–µ\n"
        f"4 - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    )
    await state.set_state(EditProduct.edit_field)


@dp.message(EditProduct.edit_field)
async def edit_product_field(message: types.Message, state: FSMContext):
    field = message.text
    
    if field not in ['1', '2', '3', '4']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 4:")
        return
    
    field_name = {'1': 'name', '2': 'price', '3': 'description', '4': 'image'}[field]
    await state.update_data(field=field_name)
    
    prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
    if field == '3':
        prompt = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):"
    elif field == '4':
        prompt = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ URL:"
    
    await message.answer(prompt)
    await state.set_state(EditProduct.new_value)


@dp.message(EditProduct.new_value)
async def edit_product_value(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    field = data['field']
    
    product = next((p for p in products if p['id'] == product_id), None)
    
    if field == 'price':
        try:
            new_value = float(message.text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        product[field] = new_value
    
    elif field == 'description':
        if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            product[field] = ''
        else:
            product[field] = message.text
    
    elif field == 'image':
        if message.photo:
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                old_image_url = product.get('image', '')
                if old_image_url and 'images/products/' in old_image_url:
                    old_file_name = old_image_url.split('/')[-1]
                    old_file_path = IMAGES_DIR / old_file_name
                    if old_file_path.exists():
                        old_file_path.unlink()
                        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {old_file_name}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
                photo = message.photo[-1]
                timestamp = int(time.time())
                file_name = f"product_{product_id}_{timestamp}.jpg"
                file_path = IMAGES_DIR / file_name
                
                await bot.download(photo, destination=file_path)
                new_value = f"https://fine322223.github.io/diada_moscow/images/products/{file_name}"
                product[field] = new_value
                
                logging.info(f"‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {file_path}")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
                return
        else:
            product[field] = message.text
    
    else:
        product[field] = message.text
    
    if save_products_to_file(products):
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n\n"
            f"ID: {product['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
            f"–¶–µ–Ω–∞: {product['price']} ‚ÇΩ\n"
            f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {'–î–∞' if product['image'] else '–ù–µ—Ç'}",
            reply_markup=admin_menu()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            reply_markup=admin_menu()
        )
    
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data == "delete_product")
async def delete_product_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    if not products:
        await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=admin_menu())
        await callback.answer()
        return
    
    text = "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
    text += "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    for p in products:
        text += f"ID: {p['id']} - {p['name']}\n"
    
    text += "\n<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n"
    text += "–ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä: <code>5</code>\n"
    text += "–ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: <code>1,3,5</code> –∏–ª–∏ <code>1, 2, 3</code>"
    
    await callback.message.answer(text, parse_mode="HTML")
    await state.set_state("delete_product_id")
    await callback.answer()


@dp.message(F.text, StateFilter("delete_product_id"))
async def delete_product_confirm(message: types.Message, state: FSMContext):
    try:
        ids_text = message.text.strip()
        ids = [id.strip() for id in ids_text.split(',')]
        
        deleted_count = 0
        deleted_names = []
        deleted_images = []
        not_found = []
        
        for product_id in ids:
            product = next((p for p in products if p['id'] == product_id), None)
            
            if product:
                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if product.get('image'):
                    image_path = product['image']
                    file_name = None
                    
                    if 'images/products/' in image_path:
                        file_name = image_path.split('images/products/')[-1]
                    
                    if file_name:
                        full_image_path = IMAGES_DIR / file_name
                        
                        if full_image_path.exists():
                            try:
                                full_image_path.unlink()
                                deleted_images.append(file_name)
                                logging.info(f"üóë –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_name}")
                            except Exception as e:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {file_name}: {e}")
                        else:
                            logging.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {full_image_path}")
                
                products.remove(product)
                deleted_names.append(product['name'])
                deleted_count += 1
            else:
                not_found.append(product_id)
        
        if deleted_count > 0:
            if save_products_to_file(products):
                if deleted_count == 1:
                    result_text = f"‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {deleted_names[0]}"
                else:
                    result_text = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {deleted_count}\n\n"
                    result_text += "–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n" + "\n".join(f"‚Ä¢ {name}" for name in deleted_names)
                
                if deleted_images:
                    result_text += f"\n\nüóë –£–¥–∞–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(deleted_images)}"
                
                if not_found:
                    result_text += f"\n\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã ID: {', '.join(not_found)}"
                
                await message.answer(result_text, reply_markup=admin_menu())
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", reply_markup=admin_menu())
        else:
            await message.answer(
                f"‚ùå –ù–∏ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID: {', '.join(not_found)}",
                reply_markup=admin_menu()
            )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", reply_markup=admin_menu())
    
    await state.clear()


# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message()
async def debug_all_messages(message: types.Message):
    logging.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={message.content_type}, from={message.from_user.id}")
    if message.web_app_data:
        logging.info(f"üåê WebApp –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")


# ============= –ó–ê–ü–£–°–ö –ë–û–¢–ê =============

if __name__ == "__main__":
    print("üöÄ Diada Moscow Bot –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(dp.start_polling(bot, skip_updates=True))
